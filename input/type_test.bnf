// Scalar variable
x: i32 = 64;

// 1D fixed-size array
arr: i32[4] = [1, 2, 3, 4];

// 2D fixed-size array
mat: i32[2][2] = [[1, 2], [3, 4]];

// Dynamically-sized array (size inferred)
dyn_arr: i64[] = [5, 6, 7];

// Pointer to an integer
ptr: i32* = &x;

// Array of 4 pointers to i32
ptrs: i32*[4];

// Pointer to an array of 4 i32
array_ptr: i32[4]*;

// References and pointer types

// Mutable i32 variable and immutable pointer to it
x: i32 = 64;
immutable_ptr: const i32* = &x;

// Immutable i32 variable and mutable pointer to it (likely unsafe or disallowed)
y: const i32 = 64;
mutable_ptr: i32* = &y;  // C-style languages would warn or disallow this

// Mutable pointer to mutable i32
z: i32 = 64;
mut_ptr: i32* = &z;

// Complex types

// 2x3 array of pointers to i32
nested: i32*[3][2];

// Pointer to a 2x2 array of i32
deep: i32[2][2]*;

test: i32[2][3] = [[1, 2], [3, 4]]; // 2x3 array of i32 pointers
